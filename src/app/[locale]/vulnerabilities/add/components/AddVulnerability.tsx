// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { useState } from 'react'

import { useTranslations } from 'next-intl'
import { COMMON_NAMESPACE } from '@/object-types/Constants'

import ApiUtils from '@/utils/api/api.util'
import { Session } from '@/object-types/Session'
import HttpStatus from '@/object-types/enums/HttpStatus'
import { signOut } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { VulnerabilityPayload, VulnerabilityData } from '@/object-types/VulnerabilityPayload'
import ToastData from '@/object-types/ToastData'
import ToastMessage from '@/components/sw360/ToastContainer/Toast'
import VulnerabilityDetail from '../../components/VulnerabilityDetail'
import VulnerabilityImpact from '../../components/VulnerabilityImpact'
import VulnerabilityAccess from '../../components/VulnerabilityAccess'
import { ToastContainer } from 'react-bootstrap'
import CVEReferences from '../../components/CVEReferences'
import AddValues from '../../components/AddValues'
import AddVendorAdvisory from '../../components/VendorAdvisories'
import AddKeyValueComponent from '@/components/AddKeyValue'
import InputKeyValue from '@/object-types/InputKeyValue'

export default function AddVulnerability({ session }: { session: Session }) {
    const t = useTranslations(COMMON_NAMESPACE)
    const router = useRouter()
    const [vulnerableConfiguration, setVulnerableConfiguration] = useState<InputKeyValue[]>([])
    const [vulnerabilityData, setVulnerabilityData] = useState<VulnerabilityData>({
        title: '',
        description: '',
        externalId: '',
        priority: '',
        priorityText: '',
        action: '',
        legalNotice: '',
        cwe: '',
        extendedDescription: '',
        cvss: 0.0,
        cvssDate: '',
        cvssTime: '',
        publishDate: '',
        publishTime: '',
        lastExternalUpdateDate: '',
        lastExternalUpdateTime: '',
        impact: {
            availability: '',
            confidentiality: '',
            integrity: '',
        },
        access: {
            authentication: '',
            complexity: '',
            vector: '',
        },
        cveReferences: [],
        references: [],
        assignedExtComponentIds: [],
        vendorAdvisories: [],
        vulnerableConfiguration: {},
    })

    console.log(vulnerabilityData)

    const setDataVulnerableConfiguration = (config: Map<string, string>) => {
        const obj = Object.fromEntries(config)
        setVulnerabilityData((prev) => ({ ...prev, vulnerableConfiguration: obj }))
    }

    const [toastData, setToastData] = useState<ToastData>({
        show: false,
        type: '',
        message: '',
        contextual: '',
    })

    const alert = (show_data: boolean, status_type: string, message: string, contextual: string) => {
        setToastData({
            show: show_data,
            type: status_type,
            message: message,
            contextual: contextual,
        })
    }

    const handleCancel = () => {
        router.push('/vulnerabilities')
    }

    const handleSubmit = async () => {
        const currentDate = new Date()
        const date = currentDate.toISOString().slice(0, currentDate.toISOString().lastIndexOf('T'))
        const time = currentDate.toISOString().slice(currentDate.toISOString().lastIndexOf('T') + 1, -5)
        try {
            const payload: VulnerabilityPayload = {
                title: vulnerabilityData.title,
                description: vulnerabilityData.description,
                externalId: vulnerabilityData.externalId,
                priority: vulnerabilityData.priority,
                priorityText: vulnerabilityData.priorityText,
                action: vulnerabilityData.action,
                legalNotice: vulnerabilityData.legalNotice,
                cwe: `CWE-${vulnerabilityData.cwe}`,
                extendedDescription: vulnerabilityData.extendedDescription,
                cvss: vulnerabilityData.cvss,
                cvssTime: `${vulnerabilityData.cvssDate ? vulnerabilityData.cvssDate : date}T${
                    vulnerabilityData.cvssTime ? vulnerabilityData.cvssTime : time
                }`,
                publishDate: `${vulnerabilityData.publishDate ? vulnerabilityData.publishDate : date}T${
                    vulnerabilityData.publishTime ? vulnerabilityData.publishTime : time
                }`,
                lastExternalUpdate: `${
                    vulnerabilityData.lastExternalUpdateDate ? vulnerabilityData.lastExternalUpdateDate : date
                }T${vulnerabilityData.lastExternalUpdateTime ? vulnerabilityData.lastExternalUpdateTime : time}`,
                impact: vulnerabilityData.impact,
                access: vulnerabilityData.access,
                cveReferences: Array.from(
                    new Set(vulnerabilityData.cveReferences.map((elem) => `${elem.year}-${elem.number}`))
                ),
                references: Array.from(new Set(vulnerabilityData.references)).filter((elem) => elem !== ''),
                assignedExtComponentIds: Array.from(new Set(vulnerabilityData.assignedExtComponentIds)).filter(
                    (elem) => elem !== ''
                ),
                vendorAdvisories: Array.from(new Set(vulnerabilityData.vendorAdvisories)),
                vulnerableConfiguration: vulnerabilityData.vulnerableConfiguration,
            }
            console.log(payload)
            const response = await ApiUtils.POST('vulnerabilities', payload, session.user.access_token)
            if (response.status == HttpStatus.CREATED) {
                const data = await response.json()
                alert(true, 'Success', t('Vulnerability is created'), 'success')
                router.push('/vulnerabilities/detail/' + data.externalId)
            } else if (response.status === HttpStatus.UNAUTHORIZED) {
                return signOut()
            } else if (response.status === HttpStatus.BAD_REQUEST) {
                alert(true, 'Duplicate', t('Vulnerability with the same External Id already exists'), 'danger')
            } else {
                alert(true, 'Error', t('Something went wrong'), 'danger')
            }
        } catch (e) {
            console.error(e)
        }
    }

    return (
        <>
            <div className='mx-5 mt-3'>
                <form
                    action=''
                    id='add_vulnerability'
                    method='post'
                    onSubmit={(e) => {
                        e.preventDefault()
                        handleSubmit()
                    }}
                >
                    <ToastContainer position='top-start'>
                        <ToastMessage
                            show={toastData.show}
                            type={toastData.type}
                            message={toastData.message}
                            contextual={toastData.contextual}
                            onClose={() => setToastData({ ...toastData, show: false })}
                            setShowToast={setToastData}
                        />
                    </ToastContainer>
                    <div className='row mb-4'>
                        <button type='submit' className='btn btn-primary col-auto me-2'>
                            {t('Create Vulnerability')}
                        </button>
                        <button
                            type='button'
                            id='createVulnerability.cancel'
                            className='btn btn-dark col-auto'
                            onClick={handleCancel}
                        >
                            {t('Cancel')}
                        </button>
                    </div>
                    <VulnerabilityDetail payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                    <VulnerabilityImpact setPayload={setVulnerabilityData} />
                    <VulnerabilityAccess setPayload={setVulnerabilityData} />
                    <CVEReferences payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                    <AddValues
                        componentName='Assigned External Component Ids'
                        entityName='Assigned External Component Id'
                        payloadKeyName='assignedExtComponentIds'
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <AddValues
                        componentName='Vulnerability References'
                        entityName='Vulnerability Reference'
                        payloadKeyName='references'
                        payload={vulnerabilityData}
                        setPayload={setVulnerabilityData}
                    />
                    <AddVendorAdvisory payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                    <div className='row mb-4'>
                        <AddKeyValueComponent
                            header={t('Vulnerability Configuration')}
                            keyName={'Vulnerability configuration'}
                            setData={setVulnerableConfiguration}
                            data={vulnerableConfiguration}
                            setMap={setDataVulnerableConfiguration}
                        />
                    </div>
                </form>
            </div>
        </>
    )
}
