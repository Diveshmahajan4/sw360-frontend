// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { useState, useEffect } from 'react'

import { useTranslations } from 'next-intl'
import { COMMON_NAMESPACE } from '@/object-types/Constants'

import ApiUtils from '@/utils/api/api.util'
import { Session } from '@/object-types/Session'
import HttpStatus from '@/object-types/enums/HttpStatus'
import { signOut } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { VulnerabilityPayload, VulnerabilityData } from '@/object-types/VulnerabilityPayload'
import ToastData from '@/object-types/ToastData'
import ToastMessage from '@/components/sw360/ToastContainer/Toast'
import VulnerabilityDetail from '../../../components/VulnerabilityDetail'
import VulnerabilityImpact from '../../../components/VulnerabilityImpact'
import VulnerabilityAccess from '../../../components/VulnerabilityAccess'
import { ToastContainer } from 'react-bootstrap'
import CVEReferences from '../../../components/CVEReferences'
import AddValues from '../../../components/AddValues'
import AddVendorAdvisory from '../../../components/VendorAdvisories'
import AddKeyValueComponent from '@/components/AddKeyValue'
import InputKeyValue from '@/object-types/InputKeyValue'
import { notFound } from 'next/navigation'
import CommonUtils from '@/utils/common.utils'
import { Spinner } from 'react-bootstrap'
import DeleteVulnerabilityModal from '../../../components/DeleteVulnerabilityModal'

const convertDateTimeToDateOrTime = (date: string, type: 'date' | 'time') => {
    if (!date) return ''
    if (date.split(':').length - 1 === 3) date = date.slice(date.lastIndexOf(':'))
    if (date.lastIndexOf('T') !== -1) {
        if (type === 'date') return date.slice(0, date.lastIndexOf('T'))
        else return date.slice(date.lastIndexOf('T') + 1)
    }
    if (date.lastIndexOf(' ') !== -1) {
        if (type === 'date') return date.slice(0, date.lastIndexOf(' '))
        else return date.slice(date.lastIndexOf(' ') + 1)
    }
    if (type === 'date') return date
    return date
}

export default function EditVulnerability({ session, vulnerabilityId }: { session: Session; vulnerabilityId: string }) {
    const t = useTranslations(COMMON_NAMESPACE)
    const router = useRouter()
    const [vulnerableConfiguration, setVulnerableConfiguration] = useState<InputKeyValue[] | undefined>(undefined)
    const [vulnerabilityData, setVulnerabilityData] = useState<VulnerabilityData | undefined>(undefined)
    const [vulnerabilityToBeDeleted, setVulnerabilityToBeDeleted] = useState<null | string>(null)

    const onDeleteClick = (id: string) => {
        setVulnerabilityToBeDeleted(id)
        router.push('/vulnerabilities')
    }

    useEffect(() => {
        const controller = new AbortController()
        const signal = controller.signal

        ;(async () => {
            try {
                const response = await ApiUtils.GET(
                    `vulnerabilities/${vulnerabilityId}`,
                    session.user.access_token,
                    signal
                )
                if (response.status === HttpStatus.UNAUTHORIZED) {
                    return signOut()
                } else if (response.status !== HttpStatus.OK) {
                    return notFound()
                }

                const data = await response.json()

                setVulnerableConfiguration(CommonUtils.convertObjectToMap(data.vulnerableConfiguration ?? {}))

                setVulnerabilityData({
                    title: data.title ?? '',
                    description: data.description ?? '',
                    externalId: data.externalId ?? '',
                    priority: data.priority ?? '',
                    priorityText: data.priorityText ?? '',
                    action: data.action ?? '',
                    legalNotice: data.legalNotice ?? '',
                    cwe: data.cwe ? data.cwe.slice(data.cwe.indexOf('-') + 1) : '',
                    extendedDescription: data.extendedDescription ?? '',
                    cvss: data.cvss ?? 0.0,
                    cvssDate: convertDateTimeToDateOrTime(data.cvssTime, 'date'),
                    cvssTime: convertDateTimeToDateOrTime(data.cvssTime, 'time'),
                    publishDate: convertDateTimeToDateOrTime(data.publishDate, 'date'),
                    publishTime: convertDateTimeToDateOrTime(data.publishDate, 'time'),
                    lastExternalUpdateDate: convertDateTimeToDateOrTime(data.lastExternalUpdate, 'date'),
                    lastExternalUpdateTime: convertDateTimeToDateOrTime(data.lastExternalUpdate, 'time'),
                    impact: {
                        availability: data.impact?.availability ?? '',
                        confidentiality: data.impact?.confidentiality ?? '',
                        integrity: data.impact?.integrity ?? '',
                    },
                    access: {
                        authentication: data.access?.authentication ?? '',
                        complexity: data.access?.complexity ?? '',
                        vector: data.access?.vector ?? '',
                    },
                    cveReferences: data.cveReferences
                        ? data.cveReferences.map((elem: string) => {
                              const ind = elem.lastIndexOf('-')
                              if (ind === -1) return
                              return { year: elem.slice(0, ind), number: elem.slice(ind + 1) }
                          })
                        : [],
                    references: data.references ?? [],
                    assignedExtComponentIds: data.assignedExtComponentIds ?? [],
                    vendorAdvisories: data.vendorAdvisories ?? [],
                    vulnerableConfiguration: data.vulnerableConfiguration ?? {},
                })
            } catch (e) {
                console.error(e)
            }
        })()

        return () => controller.abort()
    }, [vulnerabilityId, session])

    const setDataVulnerableConfiguration = (config: Map<string, string>) => {
        const obj = Object.fromEntries(config)
        setVulnerabilityData((prev) => ({ ...prev, vulnerableConfiguration: obj }))
    }

    const [toastData, setToastData] = useState<ToastData>({
        show: false,
        type: '',
        message: '',
        contextual: '',
    })

    const alert = (show_data: boolean, status_type: string, message: string, contextual: string) => {
        setToastData({
            show: show_data,
            type: status_type,
            message: message,
            contextual: contextual,
        })
    }

    const handleCancel = () => {
        router.push('/vulnerabilities')
    }

    const handleSubmit = async () => {
        const currentDate = new Date()
        const date = currentDate.toISOString().slice(0, currentDate.toISOString().lastIndexOf('T'))
        const time = currentDate.toISOString().slice(currentDate.toISOString().lastIndexOf('T') + 1, -5)
        try {
            const payload: VulnerabilityPayload = {
                title: vulnerabilityData.title,
                description: vulnerabilityData.description,
                externalId: vulnerabilityData.externalId,
                priority: vulnerabilityData.priority,
                priorityText: vulnerabilityData.priorityText,
                action: vulnerabilityData.action,
                legalNotice: vulnerabilityData.legalNotice,
                cwe: `CWE-${vulnerabilityData.cwe}`,
                extendedDescription: vulnerabilityData.extendedDescription,
                cvss: vulnerabilityData.cvss,
                cvssTime: `${vulnerabilityData.cvssDate ? vulnerabilityData.cvssDate : date}T${
                    vulnerabilityData.cvssTime ? vulnerabilityData.cvssTime : time
                }`,
                publishDate: `${vulnerabilityData.publishDate ? vulnerabilityData.publishDate : date}T${
                    vulnerabilityData.publishTime ? vulnerabilityData.publishTime : time
                }`,
                lastExternalUpdate: `${
                    vulnerabilityData.lastExternalUpdateDate ? vulnerabilityData.lastExternalUpdateDate : date
                }T${vulnerabilityData.lastExternalUpdateTime ? vulnerabilityData.lastExternalUpdateTime : time}`,
                impact: vulnerabilityData.impact,
                access: vulnerabilityData.access,
                cveReferences: Array.from(
                    new Set(vulnerabilityData.cveReferences.map((elem) => `${elem.year}-${elem.number}`))
                ),
                references: Array.from(new Set(vulnerabilityData.references)).filter((elem) => elem !== ''),
                assignedExtComponentIds: Array.from(new Set(vulnerabilityData.assignedExtComponentIds)).filter(
                    (elem) => elem !== ''
                ),
                vendorAdvisories: Array.from(new Set(vulnerabilityData.vendorAdvisories)),
                vulnerableConfiguration: vulnerabilityData.vulnerableConfiguration,
            }
            const response = await ApiUtils.PATCH(
                `vulnerabilities/${vulnerabilityId}`,
                payload,
                session.user.access_token
            )
            if (response.status == HttpStatus.CREATED) {
                alert(true, 'Success', t('Vulnerability updated successfully'), 'success')
                router.push('/vulnerabilities/detail/' + vulnerabilityId)
            } else if (response.status === HttpStatus.UNAUTHORIZED) {
                return signOut()
            } else {
                alert(true, 'Error', t('Something went wrong'), 'danger')
            }
        } catch (e) {
            console.error(e)
        }
    }

    return (
        <>
            {vulnerabilityData && vulnerableConfiguration ? (
                <>
                    <DeleteVulnerabilityModal
                        vulnerabilityId={vulnerabilityToBeDeleted}
                        session={session}
                        setVulnerability={setVulnerabilityToBeDeleted}
                    />
                    <div className='mx-5 mt-3'>
                        <form
                            action=''
                            id='add_vulnerability'
                            method='post'
                            onSubmit={(e) => {
                                e.preventDefault()
                                handleSubmit()
                            }}
                        >
                            <ToastContainer position='top-start'>
                                <ToastMessage
                                    show={toastData.show}
                                    type={toastData.type}
                                    message={toastData.message}
                                    contextual={toastData.contextual}
                                    onClose={() => setToastData({ ...toastData, show: false })}
                                    setShowToast={setToastData}
                                />
                            </ToastContainer>
                            <div className='row mb-4'>
                                <button type='submit' className='btn btn-primary col-auto me-2'>
                                    {t('Update Vulnerability')}
                                </button>
                                <button
                                    type='button'
                                    className='btn btn-danger col-auto me-2'
                                    onClick={() => {
                                        onDeleteClick(vulnerabilityId)
                                    }}
                                >
                                    {t('Delete Vulnerability')}
                                </button>
                                <button
                                    type='button'
                                    id='createVulnerability.cancel'
                                    className='btn btn-dark col-auto'
                                    onClick={handleCancel}
                                >
                                    {t('Cancel')}
                                </button>
                            </div>
                            <VulnerabilityDetail payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                            <VulnerabilityImpact payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                            <VulnerabilityAccess payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                            <CVEReferences payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                            <AddValues
                                componentName='Assigned External Component Ids'
                                entityName='Assigned External Component Id'
                                payloadKeyName='assignedExtComponentIds'
                                payload={vulnerabilityData}
                                setPayload={setVulnerabilityData}
                            />
                            <AddValues
                                componentName='Vulnerability References'
                                entityName='Vulnerability Reference'
                                payloadKeyName='references'
                                payload={vulnerabilityData}
                                setPayload={setVulnerabilityData}
                            />
                            <AddVendorAdvisory payload={vulnerabilityData} setPayload={setVulnerabilityData} />
                            <div className='row mb-4'>
                                <AddKeyValueComponent
                                    header={t('Vulnerability Configuration')}
                                    keyName={'Vulnerability configuration'}
                                    setData={setVulnerableConfiguration}
                                    data={vulnerableConfiguration}
                                    setMap={setDataVulnerableConfiguration}
                                />
                            </div>
                        </form>
                    </div>
                </>
            ) : (
                <div className='col-12' style={{ textAlign: 'center' }}>
                    <Spinner className='spinner' />
                </div>
            )}
        </>
    )
}
