// Copyright (C) Siemens AG, 2023. Part of the SW360 Frontend Project.

// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/

// SPDX-License-Identifier: EPL-2.0
// License-Filename: LICENSE

'use client'

import { Embedded, ProjectData, ProjectVulnerability } from '@/object-types'
import { SW360_API_URL } from '@/utils/env'
import { useSession } from 'next-auth/react'
import { useTranslations } from 'next-intl'
import { ShowInfoOnHover, Table, _ } from 'next-sw360'
import Link from 'next/link'
import { useState } from 'react'

type EmbeddedProjectVulnerabilities = Embedded<ProjectVulnerability, 'sw360:vulnerabilityDTOes'>

export default function VulnerabilityTab({ projectData }: { projectData: ProjectData }) {
    const t = useTranslations('default')
    const { data: session, status } = useSession()
    const [totalVulnerabilities, setTotalVulnerabilities] = useState<number | null>(null)

    const columns = [
        {
            id: 'projectVulnerabilities.checkbox',
            formatter: (id: string) =>
                _(
                    <div className='form-check text-center'>
                        <input className='form-check-input' type='checkbox' name='projectId' value={id} id={id} />
                    </div>
                ),
            width: '5%',
            sort: true,
        },
        {
            id: 'projectVulnerabilities.release',
            name: t('Release'),
            formatter: (release: string) => _(<div className='text-center'>{release}</div>),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.externalId',
            name: t('External Id'),
            width: '8%',
            formatter: (id: string) =>
                _(
                    <Link href={`/vulnerabilties/detail/${id}`} className='text-link text-center'>
                        {id}
                    </Link>
                ),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.priority',
            name: t('Priority'),
            width: '10%',
            formatter: ({ priority, priorityToolTip }: { priority: string; priorityToolTip: string }) =>
                _(
                    <div className='text-center'>
                        <ShowInfoOnHover text={priorityToolTip} /> {priority}
                    </div>
                ),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.matchedBy',
            name: t('Matched By'),
            formatter: (matchedBy: string) => _(<div className='text-center'>{matchedBy}</div>),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.title',
            name: t('Title'),
            formatter: ({ title, description }: { title: string; description: string }) =>
                _(
                    <span className='info-text' title={description}>
                        {title}
                    </span>
                ),
            width: '25%',
            sort: true,
        },
        {
            id: 'projectVulnerabilities.relevanceForProject',
            name: t('Relevance for project'),
            formatter: (relevance: string) =>
                _(
                    <div className='text-center'>
                        <ShowInfoOnHover text={relevance} /> {relevance}
                    </div>
                ),
            sort: true,
        },
        {
            id: 'projectVulnerabilities.actions',
            name: t('Actions'),
            formatter: (actionss: string) => _(<div className='text-center'>{actionss}</div>),
            width: '12%',
            sort: true,
        },
    ]

    const server = {
        url: `${SW360_API_URL}/resource/api/projects/${projectData.id}/vulnerabilities`,
        then: (data: EmbeddedProjectVulnerabilities) => {
            setTotalVulnerabilities(data.page.totalElements)
            return data._embedded['sw360:vulnerabilityDTOes'].map((elem: ProjectVulnerability) => [
                elem.releaseVulnerabilityRelation?.vulnerabilityId ?? '',
                elem.intReleaseName ?? '',
                elem.externalId ?? '',
                { priority: elem.priority ?? '', priorityTooltip: elem.priorityToolTip ?? '' },
                elem.releaseVulnerabilityRelation?.matchedBy ?? '',
                { title: elem.title ?? '', description: elem.description ?? '' },
                elem.projectRelevance ?? '',
                elem.projectAction ?? '',
            ])
        },
        total: (data: EmbeddedProjectVulnerabilities) => data.page.totalElements,
        headers: { Authorization: `Bearer ${status === 'authenticated' ? session.user.access_token : ''}` },
    }

    return (
        <>
            <div className='mt-4 mx-5'>
                <div className='mb-4'>
                    <h5 className="header-underlined">
                        {t('Vulnerability Status Information')}
                    </h5>
                    <div className='row'>
                        <div className='col-lg-4'>{t('Security Vulnerability Monitoring')}:</div>
                        <div className='col-lg-3'>
                            {projectData.enableSvm ? (
                                <span className='badge bg-success' style={{ fontSize: '0.8rem' }}>
                                    {t('Enabled')}
                                </span>
                            ) : (
                                <span className='badge bg-light text-dark' style={{ fontSize: '0.8rem' }}>
                                    {t('Disabled')}
                                </span>
                            )}
                        </div>
                    </div>
                    <div className='row mt-3'>
                        <div className='col-lg-4'>{t('Security Vulnerabilities Display')}:</div>
                        <div className='col-lg-3'>
                            {projectData.enableVulnerabilitiesDisplay ? (
                                <span className='badge bg-success' style={{ fontSize: '0.8rem' }}>
                                    {t('Enabled')}
                                </span>
                            ) : (
                                <span className='badge bg-light text-dark' style={{ fontSize: '0.8rem' }}>
                                    {t('Disabled')}
                                </span>
                            )}
                        </div>
                    </div>
                </div>
                {projectData.enableVulnerabilitiesDisplay && (
                    <div className='mb-4'>
                        {totalVulnerabilities && (
                            <div className='alert alert-primary' role='alert'>
                                {`${t('Total vulnerabilities')}: ${totalVulnerabilities}`}
                            </div>
                        )}
                        <h5 className="header-underlined">
                            {t('Vulnerabilities')}
                        </h5>
                        <Table columns={columns} server={server} selector={true} sort={false} />
                    </div>
                )}
            </div>
        </>
    )
}
